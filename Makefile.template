SR_PLUGIN_LUA:=0
BUILD:=debug

include init.mk

SRC_DIR:=src
BUILD_DIR:=build
SRC:=$(wildcard $(SRC_DIR)/*.cc)

LIB_DIR:=lib
LIBNAME:=libsera.so
SONAME:=$(LIBNAME).1
REALNAME:=$(SONAME).1.20
CPPFLAGS+=-Iinclude
CXXFLAGS+=-std=c++11 -fPIC -pthread -MMD
LDFLAGS+=-Wl,-soname,$(SONAME) -Wl,--no-undefined -shared
LDLIBS+=-pthread

ifeq ($(SR_PLUGIN_LUA), 1)
CPPFLAGS+=-Iext/LuaBridge/Source/LuaBridge
else
SRC:=$(filter-out src/srluapluginmanager.cc,$(SRC))
endif

OBJ:=$(addprefix $(BUILD_DIR)/,$(notdir $(SRC:.cc=.o)))

ifeq ($(BUILD), release)
CPPFLAGS+=-DNDEBUG
CXXFLAGS+=-O2
LDFLAGS+=-O2 -s -flto
else
CPPFLAGS+=-DDEBUG
CXXFLAGS+=-O0 -g
LDFLAGS+=-O0 -g
endif

.PHONY: all release clean test test_run

all: $(LIB_DIR)/$(REALNAME) bin/srwatchdogd
	@:

release:
	make "BUILD=release"

WDT_LDFLAGS:=-flto -fno-exceptions -fno-rtti -fno-stack-protector
bin/srwatchdogd: $(SRC_DIR)/watchdog/srwatchdogd.cc
	@mkdir -p bin/
	@echo "(LD) $@"
	@$(CXX) -std=c++11 -Os -s -DNDEBUG $^ $(WDT_LDFLAGS) -o $@

$(LIB_DIR)/$(REALNAME): $(OBJ)
	@mkdir -p $(LIB_DIR)
	@echo "(LD) $@"
	@$(CXX) $(LDFLAGS) $^ $(LDLIBS) -o $@
	@cd $(LIB_DIR) && ln -fs $(REALNAME) $(SONAME)
	@cd $(LIB_DIR) && ln -fs $(SONAME) $(LINKNAME)

$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cc
	@mkdir -p $(BUILD_DIR)
	@echo "(CXX) $@"
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $<

TEST_SRC:=$(wildcard tests/test_*.cc)
TEST_BIN:=$(addprefix bin/,$(notdir $(TEST_SRC:.cc=)))

bin/test_%: tests/test_%.cc
	@mkdir -p bin
	@$(CXX) -pthread -std=c++11 -Iinclude -Llib $< -lsera -o $@

test: $(TEST_BIN)
	@$(foreach var,$^,LD_LIBRARY_PATH=lib $(var);)

clean:
	@rm -f $(BUILD_DIR)/*.o $(BUILD_DIR)/*.d $(LIB_DIR)/$(LIBNAME).* bin/*

-include $(OBJ:.o=.d)
